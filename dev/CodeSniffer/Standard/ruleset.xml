<?xml version="1.0"?>
<ruleset name="Mediboard">
  <description>The Mediboard coding standard.</description>

  <!-- File exclusions -->
  <exclude-pattern>/*.js</exclude-pattern>
  <exclude-pattern>/en.php</exclude-pattern>
  <exclude-pattern>/fr.php</exclude-pattern>
  <exclude-pattern>/dev/</exclude-pattern>
  <exclude-pattern>/config.php</exclude-pattern>
  <exclude-pattern>/files/</exclude-pattern>
  <exclude-pattern>/images/</exclude-pattern>
  <exclude-pattern>/lib/</exclude-pattern>
  <exclude-pattern>/libpkg/</exclude-pattern>
  <exclude-pattern>/locales/</exclude-pattern>
  <exclude-pattern>/templates/</exclude-pattern>
  <exclude-pattern>/tests/</exclude-pattern>
  <exclude-pattern>/tmp/</exclude-pattern>
  <exclude-pattern>*/vendor/*</exclude-pattern>

  <!-- Include some additional sniffs from the Generic standard -->
  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
  <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
  <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
  <rule ref="Generic.Commenting.Todo"/>
  <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
  <rule ref="Generic.Metrics.NestingLevel"/>
  <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
  <rule ref="Generic.PHP.LowerCaseConstant"/>
  <rule ref="Generic.PHP.DisallowShortOpenTag"/>
  <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
  <rule ref="Generic.WhiteSpace.ScopeIndent"/>
  
  <rule ref="Generic.Metrics.CyclomaticComplexity">
    <properties>
      <property name="complexity" value="15"/>
    </properties>
  </rule>

  <!-- Use 2 spaces indent -->
  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <!-- Lines length -->
  <rule ref="Generic.Files.LineLength">
    <properties>
      <property name="lineLimit" value="135"/>
      <property name="absoluteLineLimit" value="135"/>
    </properties>
  </rule>

  <!-- Use warnings for inline control structures -->
  <rule ref="Generic.ControlStructures.InlineControlStructure">
    <properties>
      <property name="error" value="false"/>
    </properties>
  </rule>

  <!-- Don't bother line endings -->
  <rule ref="Generic.Files.LineEndings.InvalidEOLChar">
    <severity>0</severity>
  </rule>

  <!-- This message is not required as spaces are allowed for alignment -->
  <rule ref="Generic.Functions.FunctionCallArgumentSpacing.SpaceBeforeComma">
    <severity>0</severity>
  </rule>

  <!-- By now, don't show up tasks -->
  <rule ref="Generic.Commenting.Todo.TaskFound">
    <severity>0</severity>
  </rule>

  <!-- Throws issues for params present only for overridable/inheritence purposes -->
  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.Found">
    <severity>0</severity>
  </rule>

  <!-- Remove buggy "Useless method overriding detected", see http://pear.php.net/bugs/bug.php?id=19481 -->
  <rule ref="Generic.CodeAnalysis.UselessOverridingMethod.Found">
    <severity>0</severity>
  </rule>

  <!-- PEAR Sniffs -->
  <rule ref="PEAR">
    <exclude name="PEAR.ControlStructures.ControlSignature" />
    <exclude name="PEAR.WhiteSpace.ScopeIndent" />
    <exclude name="PEAR.WhiteSpace.ObjectOperatorIndent" />
    <exclude name="PEAR.Commenting.FunctionComment" />
  </rule>

  <rule ref="PEAR.Classes.ClassDeclaration.OpenBraceNewLine">
    <severity>0</severity>
  </rule>
  
  <rule ref="PEAR.WhiteSpace.ScopeIndent.Incorrect">
    <severity>0</severity>
  </rule>
  
  <rule ref="PEAR.ControlStructures.ControlSignature">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.Commenting.ClassComment.MissingTag">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.Commenting.FileComment.InvalidSubpackage">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.Commenting.FileComment.InvalidVersion">
    <severity>0</severity>
  </rule>
  
  <rule ref="PEAR.Commenting.FileComment.MissingVersion">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.Commenting.FileComment.MissingTag">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.ControlStructures.MultiLineCondition.StartWithBoolean">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.Formatting.MultiLineAssignment.EqualSignLine">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.Functions.FunctionCallSignature">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <rule ref="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.Functions.FunctionDeclaration.BraceOnSameLine">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.NamingConventions.ValidFunctionName.FunctionNoCaptial">
    <severity>0</severity>
  </rule>
  
  <rule ref="PEAR.NamingConventions.ValidFunctionName.PublicUnderscore">
    <severity>0</severity>
  </rule>
  
  <rule ref="PEAR.NamingConventions.ValidFunctionName.PrivateNoUnderscore">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.NamingConventions.ValidVariableName.PublicUnderscore">
    <severity>0</severity>
  </rule>

  <rule ref="PEAR.NamingConventions.ValidVariableName.PrivateNoUnderscore">
    <severity>0</severity>
  </rule>

  <!--
  <rule ref="PEAR.Files.IncludingFile.UseInclude">
    <severity>0</severity>
  </rule>
  
  <rule ref="PEAR.Files.IncludingFile.UseIncludeOnce">
    <severity>0</severity>
  </rule>
  -->

  <rule ref="PEAR.WhiteSpace.ScopeClosingBrace">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <!-- To be implemented -->
  <!-- MB.Functions.FunctionDeclaration.SpaceBeforeOpeningBracket -->
  <!-- MB.Functions.FonctionReturn.ReturnNull -->
  
</ruleset>
